 首先选中这几列
 state <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy","Income","Frost")])
 fit <- lm(Murder~Population+Illiteracy+Income+Frost,data=state)
> summary(fit) 是为了获取描述性统计量

Call:
lm(formula = Murder ~ Population + Illiteracy + Income + Frost, 
    data = state)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.7960 -1.6495 -0.0811  1.4815  7.6210 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 1.235e+00  3.866e+00   0.319   0.7510    
Population  2.237e-04  9.052e-05   2.471   0.0173 *  
Illiteracy  4.143e+00  8.744e-01   4.738 2.19e-05 ***
Income      6.442e-05  6.837e-04   0.094   0.9253    
Frost       5.813e-04  1.005e-02   0.058   0.9541    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.535 on 45 degrees of freedom
Multiple R-squared:  0.567,	Adjusted R-squared:  0.5285 
F-statistic: 14.73 on 4 and 45 DF,  p-value: 9.133e-08

lm(Murder~Population+Illiteracy+Income+Frost,data=state)

Call:
lm(formula = Murder ~ Population + Illiteracy + Income + Frost, 
    data = state)

Coefficients:
(Intercept)   Population   Illiteracy       Income        Frost  
  1.235e+00    2.237e-04    4.143e+00    6.442e-05    5.813e-04  
  

选项参数：输入控制部分 输出控制部分 调节部分
file:接一个文件
data:输入一个数据框
x:单独一个对象，可以是向量 矩阵 列表
x,y:两个输入变量
x,y,z:三个输入变量
formula:公式
na.rm:删除缺失值


数学统计函数
d:概率密度函数
p:分布函数
q:分布函数的反函数
r:产生相同分布的随机数 random

?Normal
?Geometric几何分布 ：每次试验中事件A发生的概率为p，试验进行到事件A出现时停止，此时所进行的试验次数为X
?Hypergeometric 超几何分布：N件产品中有M件残次品，从中取n件，k件是残次品的概率

生成15个均值为15方差为2的随机数（正态分布）
rnorm(n=15,mean=15,sd=2)
 [1] 18.18990 16.58406 14.23575 14.02120 14.03329
 [6] 15.27868 12.77016 15.37439 15.00992 16.43931
对随机数取整
round(rnorm(n=15,mean=15,sd=2))
 [1] 15 18 18 14 14 13 16 12 20 14 19 15 12 15 13

[11] 15.08913 15.33752 16.06657 14.60809 14.66240

x <- rnorm(n=100,mean = 15,sd = 2)
qqnorm(x) 
之后可以看见散列图分布在不超过大约15为均值2单位的图像

这些函数可以判断函数是否满足分布

生成随机数：
runif(x) 生成x个不超过1（默认）的随机数
runif(1)
[1] 0.9133913
> runif(10)
 [1] 0.03603767 0.32691764 0.66525385 0.99196054
 [5] 0.18236534 0.31216509 0.17841194 0.12911182
 [9] 0.89531565 0.80409356
> runif(10)*10
 [1] 8.116793 9.002003 7.833140 7.546083 4.154673
 [6] 4.617201 3.644877 7.991747 9.329918 9.421424
> runif(50,min=1,max=100)
 [1] 83.258945 18.587408 62.799963 82.072570
 [5] 19.043689  8.298393 61.227988 48.648610
 [9] 56.168859 68.851080 42.909097 28.757866
[13] 47.058403 63.216434 22.509243 98.202954
[17] 53.763934 16.653712 53.062927 18.464057
[21] 73.055922 32.519435 41.548727 55.995951
[25]  6.093963 95.872419 90.302787 39.727606
[29] 19.950048 54.842335 56.236761 81.099684
[33] 16.872311 23.323500  1.967274 29.052709
[37] 10.214338 99.561422 91.008734 69.369893
[41] 66.476228 31.583331 80.776722  5.807888
[45] 30.842883 54.059798 62.795170  5.258996
[49]  7.514683 98.649056

44集 描述型统计函数
安装几个包：
install.packages("Hmisc")直接安装即可
install.packages("pastecs")贼拉复杂，需要手动安装
install.packages("psych")直接

summary 对一个数据集详细统计
library(Hmisc)
describe(mycars)
mycars 

 4  Variables      32  Observations
-------------------------------------------------------------------------------------------------------
mpg 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       25    0.999    20.09    6.796    12.00    14.34    15.43    19.20    22.80 
     .90      .95 
   30.09    31.30 

lowest : 10.4 13.3 14.3 14.7 15.0, highest: 26.0 27.3 30.4 32.4 33.9
-------------------------------------------------------------------------------------------------------
hp 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       22    0.997    146.7    77.04    63.65    66.00    96.50   123.00   180.00 
     .90      .95 
  243.50   253.55 

lowest :  52  62  65  66  91, highest: 215 230 245 264 335
-------------------------------------------------------------------------------------------------------
wt 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       29    0.999    3.217    1.089    1.736    1.956    2.581    3.325    3.610 
     .90      .95 
   4.048    5.293 

lowest : 1.513 1.615 1.835 1.935 2.140, highest: 3.845 4.070 5.250 5.345 5.424
-------------------------------------------------------------------------------------------------------
am 
       n  missing distinct     Info      Sum     Mean      Gmd 
      32        0        2    0.724       13   0.4062    0.498 

library(pastecs)
> stat.desc(mycars)
                     mpg           hp          wt          am
nbr.val       32.0000000   32.0000000  32.0000000 32.00000000
nbr.null       0.0000000    0.0000000   0.0000000 19.00000000
nbr.na         0.0000000    0.0000000   0.0000000  0.00000000
min           10.4000000   52.0000000   1.5130000  0.00000000
max           33.9000000  335.0000000   5.4240000  1.00000000
range         23.5000000  283.0000000   3.9110000  1.00000000
sum          642.9000000 4694.0000000 102.9520000 13.00000000
median        19.2000000  123.0000000   3.3250000  0.00000000
mean          20.0906250  146.6875000   3.2172500  0.40625000
SE.mean        1.0654240   12.1203173   0.1729685  0.08820997
CI.mean.0.95   2.1729465   24.7195501   0.3527715  0.17990541
var           36.3241028 4700.8669355   0.9573790  0.24899194
std.dev        6.0269481   68.5628685   0.9784574  0.49899092
coef.var       0.2999881    0.4674077   0.3041285  1.22828533

describe(mycars) 这个好像比Hmisc更清晰
    vars  n   mean    sd median trimmed   mad   min    max  range skew kurtosis    se
mpg    1 32  20.09  6.03  19.20   19.70  5.41 10.40  33.90  23.50 0.61    -0.37  1.07
hp     2 32 146.69 68.56 123.00  141.19 77.10 52.00 335.00 283.00 0.73    -0.14 12.12
wt     3 32   3.22  0.98   3.33    3.15  0.77  1.51   5.42   3.91 0.42    -0.02  0.17
am     4 32   0.41  0.50   0.00    0.38  0.00  0.00   1.00   1.00 0.36    -1.92  0.09


aggregate 这个函数可以学一下
x
  name sec age height
1   赵   M  20    166
2   钱   M  40    170
3   孙   F  22    150
4   李   F  30    155
aggregate(x[,3:4],by=list(sex=x$sec),FUN = mean)
  sex age height
1   F  26  152.5
2   M  30  168.0

这个是将state.x77与state.region联合求mean。state.x77本是不包含region这一列的，但使用aggregate可以使二者联合求出平均值
(计算状态变量的平均值。x77”,分组根据地区(东北，南部，中部北部，西部)每个州属于)
aggregate(state.x77,by=list(Region=state.region),mean)
         Region Population   Income Illiteracy Life Exp    Murder  HS Grad    Frost      Area
1     Northeast   5495.111 4570.222   1.000000 71.26444  4.722222 53.96667 132.7778  18141.00
2         South   4208.125 4011.938   1.737500 69.70625 10.581250 44.34375  64.6250  54605.12
3 North Central   4803.000 4611.083   0.700000 71.76667  5.275000 54.51667 138.8333  62652.00
4          West   2915.308 4702.615   1.023077 71.23462  7.215385 62.00000 102.1538 134463.00

按地区和发生霜冻超过130天计算平均。(可以看出South地区没有Frost低于130的时候)
aggregate(state.x77,list(Region=state.region,Cold=state.x77[,"Frost"] > 130),mean)
         Region  Cold Population   Income Illiteracy Life Exp    Murder  HS Grad    Frost      Area
1     Northeast FALSE  8802.8000 4780.400  1.1800000 71.12800  5.580000 52.06000 110.6000  21838.60
2         South FALSE  4208.1250 4011.938  1.7375000 69.70625 10.581250 44.34375  64.6250  54605.12
3 North Central FALSE  7233.8333 4633.333  0.7833333 70.95667  8.283333 53.36667 120.0000  56736.50
4          West FALSE  4582.5714 4550.143  1.2571429 71.70000  6.828571 60.11429  51.0000  91863.71
5     Northeast  TRUE  1360.5000 4307.500  0.7750000 71.43500  3.650000 56.35000 160.5000  13519.00
6 North Central  TRUE  2372.1667 4588.833  0.6166667 72.57667  2.266667 55.66667 157.6667  68567.50
7          West  TRUE   970.1667 4880.500  0.7500000 70.69167  7.666667 64.20000 161.8333 184162.17

把testDF相同的行堆到一起，主标题是by1 by2的两个值
testDF <- data.frame(v1=c(1,3,5,7,8,3,5,NA,4,5,7,9),v2=c(11,33,55,77,88,33,55,NA,44,55,77,99))
> by1 <- c("red","blue",1,2,NA,"big",1,2,"red",1,NA,12)
> by2 <- c("wet","dry",99,95,NA,"damp",95,99,"red",99,NA,NA)
> testDF
   v1 v2
1   1 11
2   3 33
3   5 55
4   7 77
5   8 88
6   3 33
7   5 55
8  NA NA
9   4 44
10  5 55
11  7 77
12  9 99
> by1
 [1] "red"  "blue" "1"    "2"    NA     "big"  "1"    "2"    "red"  "1"    NA     "12"  
> by2
 [1] "wet"  "dry"  "99"   "95"   NA     "damp" "95"   "99"   "red"  "99"   NA     NA    
> aggregate(testDF,list(by1,by2),mean)
  Group.1 Group.2 v1 v2
1       1      95  5 55
2       2      95  7 77
3       1      99  5 55
4       2      99 NA NA
5     big    damp  3 33
6    blue     dry  3 33
7     red     red  4 44
8     red     wet  1 11

这个就是把mtcars的cyl gear这两列相同的行归到一起
aggregate(mtcars,list(mtcars$cyl,mtcars$gear),mean)
  Group.1 Group.2    mpg cyl     disp       hp     drat       wt    qsec  vs   am gear     carb Model
1       4       3 21.500   4 120.1000  97.0000 3.700000 2.465000 20.0100 1.0 0.00    3 1.000000    NA
2       6       3 19.750   6 241.5000 107.5000 2.920000 3.337500 19.8300 1.0 0.00    3 1.000000    NA
3       8       3 15.050   8 357.6167 194.1667 3.120833 4.104083 17.1425 0.0 0.00    3 3.083333    NA
4       4       4 26.925   4 102.6250  76.0000 4.110000 2.378125 19.6125 1.0 0.75    4 1.500000    NA
5       6       4 19.750   6 163.8000 116.5000 3.910000 3.093750 17.6700 0.5 0.50    4 4.000000    NA
6       4       5 28.200   4 107.7000 102.0000 4.100000 1.826500 16.8000 0.5 1.00    5 2.000000    NA
7       6       5 19.700   6 145.0000 175.0000 3.620000 2.770000 15.5000 0.0 1.00    5 6.000000    NA
8       8       5 15.400   8 326.0000 299.5000 3.880000 3.370000 14.5500 0.0 1.00    5 6.000000    NA

head(chickwts)
  weight      feed
1    179 horsebean
2    160 horsebean
3    136 horsebean
4    227 horsebean
5    217 horsebean
6    168 horsebean
> aggregate(weight~feed,data=chickwts,mean)
       feed   weight
1    casein 323.5833
2 horsebean 160.2000
3   linseed 218.7500
4  meatmeal 276.9091
5   soybean 246.4286
6 sunflower 328.9167

head(warpbreaks)
  breaks wool tension
1     26    A       L
2     30    A       L
3     54    A       L
4     25    A       L
5     70    A       L
6     52    A       L
> aggregate(breaks~wool+tension,data=warpbreaks,mean)
  wool tension   breaks
1    A       L 44.55556
2    B       L 28.22222
3    A       M 24.00000
4    B       M 28.77778
5    A       H 24.55556
6    B       H 18.77778

 head(airquality)
  ozone solar.r wind temp month day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6
> aggregate(cbind(ozone,temp)~month,data=airquality,mean)
  month    ozone     temp
1     5 23.61538 66.73077
2     6 29.44444 78.22222
3     7 59.11538 83.88462
4     8 59.96154 83.96154
5     9 31.44828 76.89655

.表示剩下的全部
aggregate(.~Species,data=iris,mean)
     Species Sepal.Length Sepal.Width Petal.Length Petal.Width
1     setosa        5.006       3.428        1.462       0.246
2 versicolor        5.936       2.770        4.260       1.326
3  virginica        6.588       2.974        5.552       2.026

aggregate(len~.,data=ToothGrowth,mean)
  supp dose   len
1   OJ  0.5 13.23
2   VC  0.5  7.98
3   OJ  1.0 22.70
4   VC  1.0 16.77
5   OJ  2.0 26.06
6   VC  2.0 26.14


对其中几列的分组统计（因为Manufacturer这一列有很多重复的，所以规整求平均值一下）
 aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],by=list(Manufacturer=Cars93$Manufacturer),mean)
    Manufacturer Min.Price    Price Max.Price MPG.city
1          Acura  21.05000 24.90000    28.750 21.50000
2           Audi  28.35000 33.40000    38.450 19.50000
3            BMW  23.70000 30.00000    36.200 22.00000
4          Buick  20.75000 21.62500    22.550 19.00000
5       Cadillac  35.25000 37.40000    39.500 16.00000
6      Chevrolet  16.08750 18.18750    20.325 19.62500
7       Chrylser  18.40000 18.40000    18.400 20.00000
8       Chrysler  22.00000 22.65000    23.300 21.50000
9          Dodge  12.51667 15.70000    18.900 21.66667
10         Eagle  12.70000 15.75000    18.850 24.50000
11          Ford  12.43750 14.96250    17.500 22.00000
12           Geo   9.10000 10.45000    11.750 38.00000
13         Honda  13.06667 16.46667    19.900 30.00000
14       Hyundai   9.32500 10.47500    11.625 24.25000
15      Infiniti  45.40000 47.90000    50.400 17.00000
16         Lexus  31.10000 31.60000    32.000 18.00000
17       Lincoln  33.85000 35.20000    36.550 17.50000
18         Mazda  16.34000 17.60000    18.860 23.60000
19 Mercedes-Benz  36.40000 46.90000    57.450 19.50000
20       Mercury  14.10000 14.50000    14.950 21.00000
21    Mitsubishi  15.05000 18.20000    21.400 23.50000
22        Nissan  14.85000 17.02500    19.175 22.75000
23    Oldsmobile  16.55000 17.50000    18.450 21.00000
24      Plymouth  11.40000 14.40000    17.400 23.00000
25       Pontiac  13.28000 16.14000    19.020 22.20000
26          Saab  20.30000 28.70000    37.100 20.00000
27        Saturn   9.20000 11.10000    12.900 28.00000
28        Subaru  11.36667 12.93333    14.500 27.00000
29        Suzuki   7.30000  8.60000    10.000 39.00000
30        Toyota  14.02500 17.27500    20.550 24.25000
31    Volkswagen  16.45000 18.02500    19.575 20.25000
32         Volvo  23.30000 24.70000    26.000 20.50000
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  显示串列没有完全被刷新
2: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
3: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
> head(Cars93)
  Manufacturer   Model    Type Min.Price Price Max.Price
1        Acura Integra   Small      12.9  15.9      18.8
2        Acura  Legend Midsize      29.2  33.9      38.7
3         Audi      90 Compact      25.9  29.1      32.3
4         Audi     100 Midsize      30.8  37.7      44.6
5          BMW    535i Midsize      23.7  30.0      36.2
6        Buick Century Midsize      14.2  15.7      17.3
  MPG.city MPG.highway            AirBags DriveTrain
1       25          31               None      Front
2       18          25 Driver & Passenger      Front
3       20          26        Driver only      Front
4       19          26 Driver & Passenger      Front
5       22          30        Driver only       Rear
6       22          31        Driver only      Front
  Cylinders EngineSize Horsepower  RPM Rev.per.mile
1         4        1.8        140 6300         2890
2         6        3.2        200 5500         2335
3         6        2.8        172 5500         2280
4         6        2.8        172 5500         2535
5         4        3.5        208 5700         2545
6         4        2.2        110 5200         2565
  Man.trans.avail Fuel.tank.capacity Passengers Length
1             Yes               13.2          5    177
2             Yes               18.0          5    195
3             Yes               16.9          5    180
4             Yes               21.1          6    193
5             Yes               21.1          4    186
6              No               16.4          6    189
  Wheelbase Width Turn.circle Rear.seat.room Luggage.room
1       102    68          37           26.5           11
2       115    71          38           30.0           15
3       102    67          37           28.0           14
4       106    70          37           31.0           17
5       109    69          39           27.0           13
6       105    69          41           28.0           16
  Weight  Origin          Make
1   2705 non-USA Acura Integra
2   3560 non-USA  Acura Legend
3   3375 non-USA       Audi 90
4   3405 non-USA      Audi 100
5   3640 non-USA      BMW 535i
6   2880     USA Buick Century

对产地Origin分组
aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],by=list(Cars93$Origin),mean)
  Group.1 Min.Price    Price Max.Price MPG.city
1     USA  16.53542 18.57292  20.62708 20.95833
2 non-USA  17.75556 20.50889  23.25556 23.86667

对产地和品牌同时分组
aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],
          by=list(Origin=Cars93$Origin,Manufacturer=Cars93$Manufacturer),mean)
    Origin  Manufacturer Min.Price    Price Max.Price MPG.city
1  non-USA         Acura  21.05000 24.90000    28.750 21.50000
2  non-USA          Audi  28.35000 33.40000    38.450 19.50000
3  non-USA           BMW  23.70000 30.00000    36.200 22.00000
4      USA         Buick  20.75000 21.62500    22.550 19.00000
5      USA      Cadillac  35.25000 37.40000    39.500 16.00000
6      USA     Chevrolet  16.08750 18.18750    20.325 19.62500
7      USA      Chrylser  18.40000 18.40000    18.400 20.00000
8      USA      Chrysler  22.00000 22.65000    23.300 21.50000
9      USA         Dodge  12.51667 15.70000    18.900 21.66667
10     USA         Eagle  12.70000 15.75000    18.850 24.50000
11     USA          Ford  12.43750 14.96250    17.500 22.00000
12 non-USA           Geo   9.10000 10.45000    11.750 38.00000
13 non-USA         Honda  13.06667 16.46667    19.900 30.00000
14 non-USA       Hyundai   9.32500 10.47500    11.625 24.25000
15 non-USA      Infiniti  45.40000 47.90000    50.400 17.00000
16 non-USA         Lexus  31.10000 31.60000    32.000 18.00000
17     USA       Lincoln  33.85000 35.20000    36.550 17.50000
18 non-USA         Mazda  16.34000 17.60000    18.860 23.60000
19 non-USA Mercedes-Benz  36.40000 46.90000    57.450 19.50000
20     USA       Mercury  14.10000 14.50000    14.950 21.00000
21 non-USA    Mitsubishi  15.05000 18.20000    21.400 23.50000
22 non-USA        Nissan  14.85000 17.02500    19.175 22.75000
23     USA    Oldsmobile  16.55000 17.50000    18.450 21.00000
24     USA      Plymouth  11.40000 14.40000    17.400 23.00000
25     USA       Pontiac  13.28000 16.14000    19.020 22.20000
26 non-USA          Saab  20.30000 28.70000    37.100 20.00000
27     USA        Saturn   9.20000 11.10000    12.900 28.00000
28 non-USA        Subaru  11.36667 12.93333    14.500 27.00000
29 non-USA        Suzuki   7.30000  8.60000    10.000 39.00000
30 non-USA        Toyota  14.02500 17.27500    20.550 24.25000
31 non-USA    Volkswagen  16.45000 18.02500    19.575 20.25000
32 non-USA         Volvo  23.30000 24.70000    26.000 20.50000

?summaryby
library(doBy)
> head(mycars)
                   mpg  hp    wt am
Mazda RX4         21.0 110 2.620  1
Mazda RX4 Wag     21.0 110 2.875  1
Datsun 710        22.8  93 2.320  1
Hornet 4 Drive    21.4 110 3.215  0
Hornet Sportabout 18.7 175 3.440  0
Valiant           18.1 105 3.460  0
> summaryBy(mpg+hp+wt ~ am,data=mycars,FUN = mean)
  am mpg.mean  hp.mean  wt.mean
1  0 17.14737 160.2632 3.768895
2  1 24.39231 126.8462 2.411000

describe.by(mycars,list(am=mtcars$am))

 Descriptive statistics by group 
am: 0
    vars  n   mean    sd median trimmed   mad   min    max  range  skew kurtosis    se
mpg    1 19  17.15  3.83  17.30   17.12  3.11 10.40  24.40  14.00  0.01    -0.80  0.88
hp     2 19 160.26 53.91 175.00  161.06 77.10 62.00 245.00 183.00 -0.01    -1.21 12.37
wt     3 19   3.77  0.78   3.52    3.75  0.45  2.46   5.42   2.96  0.98     0.14  0.18
am     4 19   0.00  0.00   0.00    0.00  0.00  0.00   0.00   0.00   NaN      NaN  0.00
------------------------------------------------------------------- 
am: 1
    vars  n   mean    sd median trimmed   mad   min    max  range skew kurtosis    se
mpg    1 13  24.39  6.17  22.80   24.38  6.67 15.00  33.90  18.90 0.05    -1.46  1.71
hp     2 13 126.85 84.06 109.00  114.73 63.75 52.00 335.00 283.00 1.36     0.56 23.31
wt     3 13   2.41  0.62   2.32    2.39  0.68  1.51   3.57   2.06 0.21    -1.17  0.17
am     4 13   1.00  0.00   1.00    1.00  0.00  1.00   1.00   0.00  NaN      NaN  0.00


45.频数统计函数
split(mtcars,mtcars$cyl)结果是分成了4 6 8三组

先转成因子型，然后对它进行分类
mtcars$cyl <- as.factor(mtcars$cyl)
> split(mtcars,mtcars$cyl)
$`4`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb          Model
Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1     Datsun 710
Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2      Merc 240D
Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2       Merc 230
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1       Fiat 128
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2    Honda Civic
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 Toyota Corolla
Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  Toyota Corona
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1      Fiat X1-9
Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  Porsche 914-2
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2   Lotus Europa
Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2     Volvo 142E

$`6`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb          Model
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4      Mazda RX4
Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  Mazda RX4 Wag
Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 Hornet 4 Drive
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1        Valiant
Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4       Merc 280
Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4      Merc 280C
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6   Ferrari Dino

$`8`
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb               Model
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   Hornet Sportabout
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4          Duster 360
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3          Merc 450SE
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3          Merc 450SL
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3         Merc 450SLC
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  Cadillac Fleetwood
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 Lincoln Continental
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4   Chrysler Imperial
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2    Dodge Challenger
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2         AMC Javelin
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4          Camaro Z28
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2    Pontiac Firebird
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4      Ford Pantera L
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8       Maserati Bora

分组统计
cut(mtcars$mpg,seq(10,50,10))
 [1] (20,30] (20,30] (20,30] (20,30] (10,20] (10,20] (10,20] (20,30] (20,30] (10,20] (10,20] (10,20] (10,20]
[14] (10,20] (10,20] (10,20] (10,20] (30,40] (30,40] (30,40] (20,30] (10,20] (10,20] (10,20] (10,20] (20,30]
[27] (20,30] (30,40] (10,20] (10,20] (10,20] (20,30]
Levels: (10,20] (20,30] (30,40] (40,50]

统计各组个数
> table( cut(mtcars$mpg,seq(10,50,10)))
(10,20] (20,30] (30,40] (40,50] 
     18      10       4       0 

统计各组频率
> prop.table(table(mtcars$cyl))
      4       6       8 
0.34375 0.21875 0.43750 

乘100方便计算
prop.table(table(mtcars$cyl))*100
     4      6      8 
34.375 21.875 43.750 

table(Arthritis$Treatment,Arthritis$Improved)
         
          None Some Marked
  Placebo   29    7      7
  Treated   13    7     21

with(data=Arthritis,{table(Treatment,Improved)})
         Improved
Treatment None Some Marked
  Placebo   29    7      7
  Treated   13    7     21
  
 x <- xtabs(~Treatment+Improved,data=Arthritis)
> margin.table(x)
[1] 84

prop.table(x,1)
         Improved
Treatment      None      Some    Marked
  Placebo 0.6744186 0.1627907 0.1627907
  Treated 0.3170732 0.1707317 0.5121951

addmargins(x) 行和列都添加
         Improved
Treatment None Some Marked Sum
  Placebo   29    7      7  43
  Treated   13    7     21  41
  Sum       42   14     28  84
> addmargins(x,1) 只添加列的和
         Improved
Treatment None Some Marked
  Placebo   29    7      7
  Treated   13    7     21
  Sum       42   14     28
> addmargins(x,2) 只添加行的和
         Improved
Treatment None Some Marked Sum
  Placebo   29    7      7  43
  Treated   13    7     21  41

三个变量
 xtabs(~Treatment+Improved+Sex,data=Arthritis)
, , Sex = Female

         Improved
Treatment None Some Marked
  Placebo   19    7      6
  Treated    6    5     16

, , Sex = Male

         Improved
Treatment None Some Marked
  Placebo   10    0      1
  Treated    7    2      5

> y <- xtabs(~Treatment+Improved+Sex,data=Arthritis)
> ftable(y)
                   Sex Female Male
Treatment Improved                
Placebo   None             19   10
          Some              7    0
          Marked            6    1
Treated   None              6    7
          Some              5    2
          Marked           16    5

prop.table(y)
, , Sex = Female

         Improved
Treatment       None       Some     Marked
  Placebo 0.22619048 0.08333333 0.07142857
  Treated 0.07142857 0.05952381 0.19047619

, , Sex = Male

         Improved
Treatment       None       Some     Marked
  Placebo 0.11904762 0.00000000 0.01190476
  Treated 0.08333333 0.02380952 0.05952381

> z <- ftable(y)
> prop.table(z)
                   Sex     Female       Male
Treatment Improved                          
Placebo   None         0.22619048 0.11904762
          Some         0.08333333 0.00000000
          Marked       0.07142857 0.01190476
Treated   None         0.07142857 0.08333333
          Some         0.05952381 0.02380952
          Marked       0.19047619 0.05952381
          
          
 
46 独立性检验函数
根据频数信息判断两类因子彼此相关或者相互独立的假设检验。所谓独立性就是指变量之间是独立的，没有关系。

chisq.test() 卡方检验
Fisher检验
Cochran-Mantel-Haensze检验

根据问题的需要对研究的总体做假设，记为H0；选取合适的统计量，这个统计量要在H0成立的前提下，其分布已知。
由实测的样本计算出统计量的值，并根据预先给定的显著性水平进行检验，做出拒绝或者接受假设H0的判断。
P-value 就是Probability的值，是通过计算得到的一个概率值，也就在原假设为真时，得到最大的或者超出所得到的检验统计量值的概率。
当p<0.05时拒绝原假设。P > 0.05 不拒绝原假设。


卡方独立检验
?chisq.test

library(vcd)
 mytable <- table(Arthritis$Treatment,Arthritis$Improved)
> mytable         
          None Some Marked
  Placebo   29    7      7
  Treated   13    7     21

> chisq.test(mytable)
	Pearson's Chi-squared test
data:  mytable
X-squared = 13.055, df = 2, p-value = 0.001463  小于0.05，拒绝原假设

> mytable <- table(Arthritis$Sex,Arthritis$Improved)
> chisq.test(mytable)
	Pearson's Chi-squared test
data:  mytable
X-squared = 4.8407, df = 2, p-value = 0.08889   大于0.05，不拒绝原假设，说明两个变量是独立的。


傅里叶独立检验
?fisher.test

 mytable <- xtabs(~Treatment+Improved,data=Arthritis)
> fisher.test(mytable)

	Fisher's Exact Test for Count Data

data:  mytable
p-value = 0.001393
alternative hypothesis: two.sided


科克兰-曼特尔-海恩泽尔卡方检验
?mantelhaen.test
mytable <- xtabs(~Treatment+Improved+Sex,data=Arthritis)
> mantelhaen.test(mytable)
	Cochran-Mantel-Haenszel test
data:  mytable
Cochran-Mantel-Haenszel M^2 = 14.632, df = 2, p-value = 0.0006647

换个顺序就不一样了。
mytable <- xtabs(~Treatment+Sex+Improved,data=Arthritis)
> mantelhaen.test(mytable)
	Mantel-Haenszel chi-squared test with continuity correction
data:  mytable
Mantel-Haenszel X-squared = 2.0863, df = 1, p-value = 0.1486
alternative hypothesis: true common odds ratio is not equal to 1
95 percent confidence interval:
 0.8566711 8.0070521
sample estimates:
common odds ratio 
         2.619048 



三个函数的例子。
?chisq.test

M <- as.table(rbind(c(762,327,468),c(484,239,477)))
> 
> M
    A   B   C
A 762 327 468
B 484 239 477
> dimnames(M) <- list(gender=c("F","M"),party=c("Democrat","Independent","Republican"))
> 
> M
      party
gender Democrat Independent Republican
     F      762         327        468
     M      484         239        477
> Xsq <- chisq.test(M)
> Xsq

	Pearson's Chi-squared test

data:  M
X-squared = 30.07, df = 2, p-value = 2.954e-07 
(p值 小于0.05，拒绝原假设，说明二者是相关的。)

> Xsq$observed
      party
gender Democrat Independent Republican
     F      762         327        468
     M      484         239        477
> Xsq$expected
      party
gender Democrat Independent Republican
     F 703.6714    319.6453   533.6834
     M 542.3286    246.3547   411.3166
> Xsq$residuals
      party
gender   Democrat Independent
     F  2.1988558   0.4113702
     M -2.5046695  -0.4685829
      party
gender Republican
     F -2.8432397
     M  3.2386734
> Xsq$stdres
      party
gender   Democrat Independent Republican
     F  4.5020535   0.6994517 -5.3159455
     M -4.5020535  -0.6994517  5.3159455


x <- matrix(c(12,5,7,7),ncol=2)
> x
     [,1] [,2]
[1,]   12    7
[2,]    5    7
> chisq.test(x)$p.value
[1] 0.4233054
> chisq.test(x,simulate.p.value = TRUE,B=10000)$p.value
[1] 0.2825717




傅里叶检验 F检验
?fisher.test

alternative	
indicates the alternative hypothesis and must be one of "two.sided", "greater" or "less". 
You can specify just the initial letter. Only used in the 2 by 2 case.
表示备择假设，且必须是“双边”，（单边）“更大”或“更小”中的一个。您可以只指定首字母。只在2 × 2的情况下使用。
two.sided 
greater 计算正相关
less 计算负相关


conf.int	
logical indicating if a confidence interval for the odds ratio in a 2 by 2 table should be computed (and returned).

conf.level	
confidence level for the returned confidence interval. Only used in the 2 by 2 case and if conf.int = TRUE.

conf.int
表明是否应该计算(并返回)2 × 2表格中比值比的置信区间的逻辑。

conf.level
对返回置信区间的置信水平。只在2 * 2的情况下使用，如果conf.int = TRUE



> TeaTasting <- matrix(c(3,1,1,3),nrow = 2,dimnames = list(Guess=c("Milk","Tea"),Truth=c("Milk","Tea")))
> TeaTasting
      Truth
Guess  Milk Tea
  Milk    3   1
  Tea     1   3
> fisher.test(TeaTasting)

	Fisher's Exact Test for Count Data

data:  TeaTasting
p-value = 0.4857
alternative hypothesis: true odds ratio is not equal to 1
95 percent confidence interval:
   0.2117329 621.9337505
sample estimates:
odds ratio 
  6.408309 

> fisher.test(TeaTasting,alternative = "greater")

	Fisher's Exact Test for Count Data

data:  TeaTasting
p-value = 0.2429
alternative hypothesis: true odds ratio is greater than 1
95 percent confidence interval:
 0.3135693       Inf
sample estimates:
odds ratio 
  6.408309 

Convictions <- matrix(c(2,10,15,3),nrow=2,
               dimnames = list(c("Dizygotic", "Monozygotic"),
	       c("Convicted", "Not convicted")))
> Convictions
            Convicted Not convicted
Dizygotic           2            15
Monozygotic        10             3

默认应该是双边检测
fisher.test(Convictions)

	Fisher's Exact Test for Count Data

data:  Convictions
p-value = 0.0005367
alternative hypothesis: true odds ratio is not equal to 1
95 percent confidence interval:
 0.003325764 0.363182271
sample estimates:
odds ratio 
0.04693661 

单边检测less
> fisher.test(Convictions,alternative = "less")

	Fisher's Exact Test for Count Data

data:  Convictions
p-value = 0.0004652
alternative hypothesis: true odds ratio is less than 1
95 percent confidence interval:
 0.0000000 0.2849601
sample estimates:
odds ratio 
0.04693661 

单边检测greater
> fisher.test(Convictions,alternative = "greater")

	Fisher's Exact Test for Count Data

data:  Convictions
p-value = 1
alternative hypothesis: true odds ratio is greater than 1
95 percent confidence interval:
 0.00501032        Inf
sample estimates:
odds ratio 
0.04693661 

> fisher.test(Convictions,alternative = "two.sided")

	Fisher's Exact Test for Count Data

data:  Convictions
p-value = 0.0005367
alternative hypothesis: true odds ratio is not equal to 1
95 percent confidence interval:
 0.003325764 0.363182271
sample estimates:
odds ratio 
0.04693661 

fisher.test(Convictions,conf.level = 0.95)$conf.int
[1] 0.003325764 0.363182271
attr(,"conf.level")
[1] 0.95

fisher.test(Convictions, conf.level = 0.99)$conf.int
[1] 0.001386333 0.578851645
attr(,"conf.level")
[1] 0.99


Job <- matrix(c(1,2,1,0,3,3,6,1,10,10,14,9,6,7,12,11),4,4,
       dimnames = list(income=c("< 15k","15-25k","25-40k","> 40k"),
       satisfaction=c("VeryD","LittleD","ModeratesS","VeryS")))

> fisher.test(Job)
	Fisher's Exact Test for Count Data
data:  Job
p-value = 0.7827
alternative hypothesis: two.sided

> Job
        satisfaction
income   VeryD LittleD ModeratesS VeryS
  < 15k      1       3         10     6
  15-25k     2       3         10     7
  25-40k     1       6         14    12
  > 40k      0       1          9    11



 ?mantelhaen.test
 ?mantelhaen.test
 gragresti(1990)， 231- 237页，
《青霉素和兔子的研究:立即注射或1.5小时延迟注射青霉素保护兔子免受致命注射乙型溶血性链球菌的影响》
> Rabbits <- array(c(0,0,6,5,3,0,3,6,6,2,0,4,5,6,1,0,2,5,0,0),
             dim=c(2,2,5),                                     #5个2*2的矩阵
	     dimnames = list(Delay=c("None","1.5h"),           #纵坐标 （立即 1.5之后）
	     Response = c("Cured","Died"),                     #治愈的和死的
	     Penicillin.Level = c("1/8","1/4","1/2","1","4"))) #剂量
> Rabbits
, , Penicillin.Level = 1/8

      Response
Delay  Cured Died
  None     0    6
  1.5h     0    5

, , Penicillin.Level = 1/4

      Response
Delay  Cured Died
  None     3    3
  1.5h     0    6

, , Penicillin.Level = 1/2

      Response
Delay  Cured Died
  None     6    0
  1.5h     2    4

, , Penicillin.Level = 1

      Response
Delay  Cured Died
  None     5    1
  1.5h     6    0

, , Penicillin.Level = 4

      Response
Delay  Cured Died
  None     2    0
  1.5h     5    0

 mantelhaen.test(Rabbits)

	Mantel-Haenszel chi-squared test with continuity correction

data:  Rabbits
Mantel-Haenszel X-squared = 3.9286, df = 1, p-value = 0.04747
alternative hypothesis: true common odds ratio is not equal to 1
95 percent confidence interval:
  1.026713 47.725133
sample estimates:
common odds ratio 
                7 
		
参数exect
应该计算Mantel-Haenszel检验还是精确条件检验(给定地层边缘)的逻辑指示。只在2 × 2 × K的情况下使用。

 









