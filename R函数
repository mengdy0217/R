 首先选中这几列
 state <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy","Income","Frost")])
 fit <- lm(Murder~Population+Illiteracy+Income+Frost,data=state)
> summary(fit) 是为了获取描述性统计量

Call:
lm(formula = Murder ~ Population + Illiteracy + Income + Frost, 
    data = state)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.7960 -1.6495 -0.0811  1.4815  7.6210 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 1.235e+00  3.866e+00   0.319   0.7510    
Population  2.237e-04  9.052e-05   2.471   0.0173 *  
Illiteracy  4.143e+00  8.744e-01   4.738 2.19e-05 ***
Income      6.442e-05  6.837e-04   0.094   0.9253    
Frost       5.813e-04  1.005e-02   0.058   0.9541    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.535 on 45 degrees of freedom
Multiple R-squared:  0.567,	Adjusted R-squared:  0.5285 
F-statistic: 14.73 on 4 and 45 DF,  p-value: 9.133e-08

lm(Murder~Population+Illiteracy+Income+Frost,data=state)

Call:
lm(formula = Murder ~ Population + Illiteracy + Income + Frost, 
    data = state)

Coefficients:
(Intercept)   Population   Illiteracy       Income        Frost  
  1.235e+00    2.237e-04    4.143e+00    6.442e-05    5.813e-04  
  

选项参数：输入控制部分 输出控制部分 调节部分
file:接一个文件
data:输入一个数据框
x:单独一个对象，可以是向量 矩阵 列表
x,y:两个输入变量
x,y,z:三个输入变量
formula:公式
na.rm:删除缺失值


数学统计函数
d:概率密度函数
p:分布函数
q:分布函数的反函数
r:产生相同分布的随机数 random

?Normal
?Geometric几何分布 ：每次试验中事件A发生的概率为p，试验进行到事件A出现时停止，此时所进行的试验次数为X
?Hypergeometric 超几何分布：N件产品中有M件残次品，从中取n件，k件是残次品的概率

生成15个均值为15方差为2的随机数（正态分布）
rnorm(n=15,mean=15,sd=2)
 [1] 18.18990 16.58406 14.23575 14.02120 14.03329
 [6] 15.27868 12.77016 15.37439 15.00992 16.43931
对随机数取整
round(rnorm(n=15,mean=15,sd=2))
 [1] 15 18 18 14 14 13 16 12 20 14 19 15 12 15 13

[11] 15.08913 15.33752 16.06657 14.60809 14.66240

x <- rnorm(n=100,mean = 15,sd = 2)
qqnorm(x) 
之后可以看见散列图分布在不超过大约15为均值2单位的图像

这些函数可以判断函数是否满足分布

生成随机数：
runif(x) 生成x个不超过1（默认）的随机数
runif(1)
[1] 0.9133913
> runif(10)
 [1] 0.03603767 0.32691764 0.66525385 0.99196054
 [5] 0.18236534 0.31216509 0.17841194 0.12911182
 [9] 0.89531565 0.80409356
> runif(10)*10
 [1] 8.116793 9.002003 7.833140 7.546083 4.154673
 [6] 4.617201 3.644877 7.991747 9.329918 9.421424
> runif(50,min=1,max=100)
 [1] 83.258945 18.587408 62.799963 82.072570
 [5] 19.043689  8.298393 61.227988 48.648610
 [9] 56.168859 68.851080 42.909097 28.757866
[13] 47.058403 63.216434 22.509243 98.202954
[17] 53.763934 16.653712 53.062927 18.464057
[21] 73.055922 32.519435 41.548727 55.995951
[25]  6.093963 95.872419 90.302787 39.727606
[29] 19.950048 54.842335 56.236761 81.099684
[33] 16.872311 23.323500  1.967274 29.052709
[37] 10.214338 99.561422 91.008734 69.369893
[41] 66.476228 31.583331 80.776722  5.807888
[45] 30.842883 54.059798 62.795170  5.258996
[49]  7.514683 98.649056

44集 描述型统计函数
安装几个包：
install.packages("Hmisc")直接安装即可
install.packages("pastecs")贼拉复杂，需要手动安装
install.packages("psych")直接

summary 对一个数据集详细统计
library(Hmisc)
describe(mycars)
mycars 

 4  Variables      32  Observations
-------------------------------------------------------------------------------------------------------
mpg 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       25    0.999    20.09    6.796    12.00    14.34    15.43    19.20    22.80 
     .90      .95 
   30.09    31.30 

lowest : 10.4 13.3 14.3 14.7 15.0, highest: 26.0 27.3 30.4 32.4 33.9
-------------------------------------------------------------------------------------------------------
hp 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       22    0.997    146.7    77.04    63.65    66.00    96.50   123.00   180.00 
     .90      .95 
  243.50   253.55 

lowest :  52  62  65  66  91, highest: 215 230 245 264 335
-------------------------------------------------------------------------------------------------------
wt 
       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 
      32        0       29    0.999    3.217    1.089    1.736    1.956    2.581    3.325    3.610 
     .90      .95 
   4.048    5.293 

lowest : 1.513 1.615 1.835 1.935 2.140, highest: 3.845 4.070 5.250 5.345 5.424
-------------------------------------------------------------------------------------------------------
am 
       n  missing distinct     Info      Sum     Mean      Gmd 
      32        0        2    0.724       13   0.4062    0.498 

library(pastecs)
> stat.desc(mycars)
                     mpg           hp          wt          am
nbr.val       32.0000000   32.0000000  32.0000000 32.00000000
nbr.null       0.0000000    0.0000000   0.0000000 19.00000000
nbr.na         0.0000000    0.0000000   0.0000000  0.00000000
min           10.4000000   52.0000000   1.5130000  0.00000000
max           33.9000000  335.0000000   5.4240000  1.00000000
range         23.5000000  283.0000000   3.9110000  1.00000000
sum          642.9000000 4694.0000000 102.9520000 13.00000000
median        19.2000000  123.0000000   3.3250000  0.00000000
mean          20.0906250  146.6875000   3.2172500  0.40625000
SE.mean        1.0654240   12.1203173   0.1729685  0.08820997
CI.mean.0.95   2.1729465   24.7195501   0.3527715  0.17990541
var           36.3241028 4700.8669355   0.9573790  0.24899194
std.dev        6.0269481   68.5628685   0.9784574  0.49899092
coef.var       0.2999881    0.4674077   0.3041285  1.22828533

describe(mycars) 这个好像比Hmisc更清晰
    vars  n   mean    sd median trimmed   mad   min    max  range skew kurtosis    se
mpg    1 32  20.09  6.03  19.20   19.70  5.41 10.40  33.90  23.50 0.61    -0.37  1.07
hp     2 32 146.69 68.56 123.00  141.19 77.10 52.00 335.00 283.00 0.73    -0.14 12.12
wt     3 32   3.22  0.98   3.33    3.15  0.77  1.51   5.42   3.91 0.42    -0.02  0.17
am     4 32   0.41  0.50   0.00    0.38  0.00  0.00   1.00   1.00 0.36    -1.92  0.09

aggregate 这个函数可以学一下

对其中几列的分组统计（因为Manufacturer这一列有很多重复的，所以规整求平均值一下）
 aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],by=list(Manufacturer=Cars93$Manufacturer),mean)
    Manufacturer Min.Price    Price Max.Price MPG.city
1          Acura  21.05000 24.90000    28.750 21.50000
2           Audi  28.35000 33.40000    38.450 19.50000
3            BMW  23.70000 30.00000    36.200 22.00000
4          Buick  20.75000 21.62500    22.550 19.00000
5       Cadillac  35.25000 37.40000    39.500 16.00000
6      Chevrolet  16.08750 18.18750    20.325 19.62500
7       Chrylser  18.40000 18.40000    18.400 20.00000
8       Chrysler  22.00000 22.65000    23.300 21.50000
9          Dodge  12.51667 15.70000    18.900 21.66667
10         Eagle  12.70000 15.75000    18.850 24.50000
11          Ford  12.43750 14.96250    17.500 22.00000
12           Geo   9.10000 10.45000    11.750 38.00000
13         Honda  13.06667 16.46667    19.900 30.00000
14       Hyundai   9.32500 10.47500    11.625 24.25000
15      Infiniti  45.40000 47.90000    50.400 17.00000
16         Lexus  31.10000 31.60000    32.000 18.00000
17       Lincoln  33.85000 35.20000    36.550 17.50000
18         Mazda  16.34000 17.60000    18.860 23.60000
19 Mercedes-Benz  36.40000 46.90000    57.450 19.50000
20       Mercury  14.10000 14.50000    14.950 21.00000
21    Mitsubishi  15.05000 18.20000    21.400 23.50000
22        Nissan  14.85000 17.02500    19.175 22.75000
23    Oldsmobile  16.55000 17.50000    18.450 21.00000
24      Plymouth  11.40000 14.40000    17.400 23.00000
25       Pontiac  13.28000 16.14000    19.020 22.20000
26          Saab  20.30000 28.70000    37.100 20.00000
27        Saturn   9.20000 11.10000    12.900 28.00000
28        Subaru  11.36667 12.93333    14.500 27.00000
29        Suzuki   7.30000  8.60000    10.000 39.00000
30        Toyota  14.02500 17.27500    20.550 24.25000
31    Volkswagen  16.45000 18.02500    19.575 20.25000
32         Volvo  23.30000 24.70000    26.000 20.50000
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  显示串列没有完全被刷新
2: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
3: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
> head(Cars93)
  Manufacturer   Model    Type Min.Price Price Max.Price
1        Acura Integra   Small      12.9  15.9      18.8
2        Acura  Legend Midsize      29.2  33.9      38.7
3         Audi      90 Compact      25.9  29.1      32.3
4         Audi     100 Midsize      30.8  37.7      44.6
5          BMW    535i Midsize      23.7  30.0      36.2
6        Buick Century Midsize      14.2  15.7      17.3
  MPG.city MPG.highway            AirBags DriveTrain
1       25          31               None      Front
2       18          25 Driver & Passenger      Front
3       20          26        Driver only      Front
4       19          26 Driver & Passenger      Front
5       22          30        Driver only       Rear
6       22          31        Driver only      Front
  Cylinders EngineSize Horsepower  RPM Rev.per.mile
1         4        1.8        140 6300         2890
2         6        3.2        200 5500         2335
3         6        2.8        172 5500         2280
4         6        2.8        172 5500         2535
5         4        3.5        208 5700         2545
6         4        2.2        110 5200         2565
  Man.trans.avail Fuel.tank.capacity Passengers Length
1             Yes               13.2          5    177
2             Yes               18.0          5    195
3             Yes               16.9          5    180
4             Yes               21.1          6    193
5             Yes               21.1          4    186
6              No               16.4          6    189
  Wheelbase Width Turn.circle Rear.seat.room Luggage.room
1       102    68          37           26.5           11
2       115    71          38           30.0           15
3       102    67          37           28.0           14
4       106    70          37           31.0           17
5       109    69          39           27.0           13
6       105    69          41           28.0           16
  Weight  Origin          Make
1   2705 non-USA Acura Integra
2   3560 non-USA  Acura Legend
3   3375 non-USA       Audi 90
4   3405 non-USA      Audi 100
5   3640 non-USA      BMW 535i
6   2880     USA Buick Century

对产地Origin分组
aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],by=list(Cars93$Origin),mean)
  Group.1 Min.Price    Price Max.Price MPG.city
1     USA  16.53542 18.57292  20.62708 20.95833
2 non-USA  17.75556 20.50889  23.25556 23.86667

对产地和品牌同时分组
aggregate(Cars93[c("Min.Price","Price","Max.Price","MPG.city")],by=list(Origin=Cars93$Origin,Manufacturer=Cars93$Manufacturer),mean)
    Origin  Manufacturer Min.Price    Price Max.Price MPG.city
1  non-USA         Acura  21.05000 24.90000    28.750 21.50000
2  non-USA          Audi  28.35000 33.40000    38.450 19.50000
3  non-USA           BMW  23.70000 30.00000    36.200 22.00000
4      USA         Buick  20.75000 21.62500    22.550 19.00000
5      USA      Cadillac  35.25000 37.40000    39.500 16.00000
6      USA     Chevrolet  16.08750 18.18750    20.325 19.62500
7      USA      Chrylser  18.40000 18.40000    18.400 20.00000
8      USA      Chrysler  22.00000 22.65000    23.300 21.50000
9      USA         Dodge  12.51667 15.70000    18.900 21.66667
10     USA         Eagle  12.70000 15.75000    18.850 24.50000
11     USA          Ford  12.43750 14.96250    17.500 22.00000
12 non-USA           Geo   9.10000 10.45000    11.750 38.00000
13 non-USA         Honda  13.06667 16.46667    19.900 30.00000
14 non-USA       Hyundai   9.32500 10.47500    11.625 24.25000
15 non-USA      Infiniti  45.40000 47.90000    50.400 17.00000
16 non-USA         Lexus  31.10000 31.60000    32.000 18.00000
17     USA       Lincoln  33.85000 35.20000    36.550 17.50000
18 non-USA         Mazda  16.34000 17.60000    18.860 23.60000
19 non-USA Mercedes-Benz  36.40000 46.90000    57.450 19.50000
20     USA       Mercury  14.10000 14.50000    14.950 21.00000
21 non-USA    Mitsubishi  15.05000 18.20000    21.400 23.50000
22 non-USA        Nissan  14.85000 17.02500    19.175 22.75000
23     USA    Oldsmobile  16.55000 17.50000    18.450 21.00000
24     USA      Plymouth  11.40000 14.40000    17.400 23.00000
25     USA       Pontiac  13.28000 16.14000    19.020 22.20000
26 non-USA          Saab  20.30000 28.70000    37.100 20.00000
27     USA        Saturn   9.20000 11.10000    12.900 28.00000
28 non-USA        Subaru  11.36667 12.93333    14.500 27.00000
29 non-USA        Suzuki   7.30000  8.60000    10.000 39.00000
30 non-USA        Toyota  14.02500 17.27500    20.550 24.25000
31 non-USA    Volkswagen  16.45000 18.02500    19.575 20.25000
32 non-USA         Volvo  23.30000 24.70000    26.000 20.50000

?summaryby
library(doBy)
> head(mycars)
                   mpg  hp    wt am
Mazda RX4         21.0 110 2.620  1
Mazda RX4 Wag     21.0 110 2.875  1
Datsun 710        22.8  93 2.320  1
Hornet 4 Drive    21.4 110 3.215  0
Hornet Sportabout 18.7 175 3.440  0
Valiant           18.1 105 3.460  0
> summaryBy(mpg+hp+wt ~ am,data=mycars,FUN = mean)
  am mpg.mean  hp.mean  wt.mean
1  0 17.14737 160.2632 3.768895
2  1 24.39231 126.8462 2.411000

describe.by(mycars,list(am=mtcars$am))

 Descriptive statistics by group 
am: 0
    vars  n   mean    sd median trimmed   mad   min    max  range  skew kurtosis    se
mpg    1 19  17.15  3.83  17.30   17.12  3.11 10.40  24.40  14.00  0.01    -0.80  0.88
hp     2 19 160.26 53.91 175.00  161.06 77.10 62.00 245.00 183.00 -0.01    -1.21 12.37
wt     3 19   3.77  0.78   3.52    3.75  0.45  2.46   5.42   2.96  0.98     0.14  0.18
am     4 19   0.00  0.00   0.00    0.00  0.00  0.00   0.00   0.00   NaN      NaN  0.00
------------------------------------------------------------------- 
am: 1
    vars  n   mean    sd median trimmed   mad   min    max  range skew kurtosis    se
mpg    1 13  24.39  6.17  22.80   24.38  6.67 15.00  33.90  18.90 0.05    -1.46  1.71
hp     2 13 126.85 84.06 109.00  114.73 63.75 52.00 335.00 283.00 1.36     0.56 23.31
wt     3 13   2.41  0.62   2.32    2.39  0.68  1.51   3.57   2.06 0.21    -1.17  0.17
am     4 13   1.00  0.00   1.00    1.00  0.00  1.00   1.00   0.00  NaN      NaN  0.00

