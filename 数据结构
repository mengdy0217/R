载入数据集：先输入data() 会显示出很对数据集，之后直接输入想载入的数据集就好了

1.向量
c()
c(1:100) 会输出1-100
seq(from=1,to=100,by=2) 输出1-100间隔为2
rep(2,5)重复5次2
rep(x,each = 5,times = 2)将x向量重复5次，执行两轮
（但是数据必须是同一类型）

2.向量索引
>x[1]
[1] 1
> x[-19]  就不会输出第19个元素

y <- c(1:10)
> y
 [1]  1  2  3  4  5  6  7  8  9 10
这个逻辑判断是循环使用的
> y[c(T,F,F,T)]
[1] 1 4 5 8 9

%in%
#首先复制两个变量a和
>a <- 1:5
>b <- 3:7
>a %in% b    #看a的元素是否包含在b中输出结果如下：
[1] FALSE FALSE  TRUE  TRUE  TRUE

k表示两个向量之间的匹配
k <- z %in% c("one","two")
> z[k]
[1] "one" "two"

v <- 1:3







3.向量运算
%%表示余数
%/%表示除法

> v[c(4,5,6)] <- c(4,5,6)
> v
[1] 1 2 3 4 5 6
> v[20] <- 4
> v
 [1]  1  2  3  4  5  6 NA NA NA NA NA NA NA NA NA NA NA NA NA  4
 
sqrt(25)
[1] 5
> log(16,base = 2) 以2为底16的对数
log(16)就是以e为底
exp(x) 计算x向量每个元素的指数
 [1]    0.1353353    0.3678794    1.0000000    2.7182818    7.3890561   20.0855369
 [7]   54.5981500  148.4131591  403.4287935 1096.6331584
ceiling返回两个整数表示向量的范围
floor表示返回整数
sum表示总和
range 返回最大最小值
mean均值
var方差
median(vec)中位数
[1] 50.5
> quantile(vec)
    0%    25%    50%    75%   100% 
  1.00  25.75  50.50  75.25 100.00 
> quantile(vec,c(0.4,0.5,0.8))
 40%  50%  80% 
40.6 50.5 80.2 
> t <- c(1,4,2,5,7,9,6)
> t
[1] 1 4 2 5 7 9 6
> which.max(t) 返回最大值所在位置
[1] 6

4.矩阵和数组
heatmap(state.x77)
> x <- 1:20
> x
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> m <- matrix(x,nrow = 4,ncol = 5)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
> 
> m <- matrix(1:20,nrow = 4,ncol = 5)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
> matrix(1:20,4)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
> m <- matrix(1:20,4,byrow = T) T表示按行排序
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10
[3,]   11   12   13   14   15
[4,]   16   17   18   19   20
> m <- matrix(1:20,4,byrow = F) F 表示按纵向排序
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

rnames <- c("R1","R2","R3","R4")
> rnames
[1] "R1" "R2" "R3" "R4"
> cnames <- c("C1","C2","C3","C4","C5")
> cnames
[1] "C1" "C2" "C3" "C4" "C5"
> dimnames(m) <- list(rnames,cnames)
> m
   C1 C2 C3 C4 C5
R1  1  5  9 13 17
R2  2  6 10 14 18
R3  3  7 11 15 19
R4  4  8 12 16 20

 dim(x) <- c(2,2,5) 生成5个2*2的矩阵
> x
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 3

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 4

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 5

     [,1] [,2]
[1,]   17   19
[2,]   18   20


建立数组
d1 <- c("A1","A2")
> d2 <- c("B1","B2","B3")
> d3 <- c("C1","C2","C3","C4")
> z <- array(1:24,c(2,3,4),dimnames = list(d1,d2,d3)) 4个2*3矩阵，矩阵标题都是 d1 d2 d3
> z
, , C1

   B1 B2 B3
A1  1  3  5
A2  2  4  6

, , C2

   B1 B2 B3
A1  7  9 11
A2  8 10 12

, , C3

   B1 B2 B3
A1 13 15 17
A2 14 16 18

, , C4

   B1 B2 B3
A1 19 21 23
A2 20 22 24


m <- matrix(1:20,4,5,byrow = T)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10
[3,]   11   12   13   14   15
[4,]   16   17   18   19   20
> m(1,2)
Error in m(1, 2) : 没有"m"这个函数
> m[1,2]
[1] 2
> m[1,c(2,3,4)]
[1] 2 3 4
> m[2,]
[1]  6  7  8  9 10
> m[,2]
[1]  2  7 12 17
> m[-1,2] 输出第二列但是不输出[2,1]位置的元素
[1]  7 12 17

5.列表（最复杂的数据结构）
可以存向量 矩阵 数据框
state.center就是一个列表

比如
a <- 1:20
> b <- matrix(1:20,4)
> c <- mtcars
> d <- "This is a test list!"
> a;b;c;d
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
[1] "This is a test list!"

把他们弄到一个列表里
mlist <- list(a,b,c,d)
可以加序号
mlist <- list(first = a,second = b,third = c,forth = d)mlist
 mlist[1]
$first
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> mlist[c(1,4)]
$first
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
$forth
[1] "This is a test list!"

给第五项赋值
mlist[[5]] <- iris
> mlist[5]

给第五项删除
mlist[-5]
或者
mlist[[5]] <- NULL

6.数据框
是一种表格式的数据结构
行表示观测 列表示变量

形状上很像矩阵，是比较规则的列表
如 iris mtcars

合并到一个数据集
state <- data.frame(state.name,state.abb,state.region,state.x77)
state

state$state.name
[]单中括号表示某节车厢
[[]]双中括号表示选中某节车厢里的内容

7.因子
名义型变量（不包括数据的
连续型变量
有序型变量

名义型变量和有序型变量成为因子 factor，这些分类变量的可能值成为一个水平，这些变量的集合
f <- factor(c("red","red","green","blue","red","green","blue"))
> f
[1] red   red   green blue  red   green blue 
Levels: blue green red

ordered参数可以排序
f <- factor(c("red","red","green","blue","red","green","blue"),ordered = T,levels = c("blue","green","red"))
> f
[1] red   red   green blue  red   green blue 
Levels: blue < green < red

8.缺失数据
is.na()判断每个元素是否为缺失值
colSums()计算每一列的缺失值数
rowSums()计算每一行的缺失值数
c <- c(NA,1:20,NA,NA)
> d <- na.omit(c)
> d
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
attr(,"na.action")
[1]  1 22 23
attr(,"class")
[1] "omit"

9.字符串
nchar()统计字符串的字符个数

month.name
 [1] "January"   "February"  "March"     "April"     "May"       "June"      "July"     
 [8] "August"    "September" "October"   "November"  "December" 
> nchar(month.name)
 [1] 7 8 5 5 3 4 4 6 9 7 8 8
> length(month.name)

粘贴字符串
paste(c("Everybody","loves","stats"))
[1] "Everybody" "loves"     "stats"    
> paste("Everybody","loves","stats")
[1] "Everybody loves stats"
> paste("Everybody","loves","stats",sep = "-")
[1] "Everybody-loves-stats"
> names <- c("Mary","Linda","Poul")
> paste(names,"love stats")

 substr(x = month.name,start = 1,stop  = 3)
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"
> temp <- substr(x = month.name,start = 1,stop  = 3)
> toupper(temp)
 [1] "JAN" "FEB" "MAR" "APR" "MAY" "JUN" "JUL" "AUG" "SEP" "OCT" "NOV" "DEC"
 tolower(temp)
 [1] "jan" "feb" "mar" "apr" "may" "jun" "jul" "aug" "sep" "oct" "nov" "dec"
 
 x <- c("b","A+","AC")
> match("AC",x) 验证前者是否包含于后者
[1] 3
> path <- "/user/local/bin/R"
> strsplit(path,"/")分割字符串
[[1]]
[1] ""      "user"  "local" "bin"   "R"    

> face <- 1:13
> suit <- c("spades","clubs","hearts","diomonds")
> face
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13
> suit
[1] "spades"   "clubs"    "hearts"   "diomonds"
> outer(suit,face,FUN = paste) 其实是一副扑克牌
     [,1]         [,2]         [,3]         [,4]         [,5]         [,6]        
[1,] "spades 1"   "spades 2"   "spades 3"   "spades 4"   "spades 5"   "spades 6"  
[2,] "clubs 1"    "clubs 2"    "clubs 3"    "clubs 4"    "clubs 5"    "clubs 6"   
[3,] "hearts 1"   "hearts 2"   "hearts 3"   "hearts 4"   "hearts 5"   "hearts 6"  
[4,] "diomonds 1" "diomonds 2" "diomonds 3" "diomonds 4" "diomonds 5" "diomonds 6"
     [,7]         [,8]         [,9]         [,10]         [,11]         [,12]        
[1,] "spades 7"   "spades 8"   "spades 9"   "spades 10"   "spades 11"   "spades 12"  
[2,] "clubs 7"    "clubs 8"    "clubs 9"    "clubs 10"    "clubs 11"    "clubs 12"   
[3,] "hearts 7"   "hearts 8"   "hearts 9"   "hearts 10"   "hearts 11"   "hearts 12"  
[4,] "diomonds 7" "diomonds 8" "diomonds 9" "diomonds 10" "diomonds 11" "diomonds 12"
     [,13]        
[1,] "spades 13"  
[2,] "clubs 13"   
[3,] "hearts 13"  
[4,] "diomonds 13"
[1] "Mary love stats"  "Linda love stats" "Poul love stats" 
[1] 12

10.时间与日期
ts(1:26,frequency = 12,start = c(1986,10)) frequency = 12表示按月份增加（增加26个月份
     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
1986                                       1   2   3
1987   4   5   6   7   8   9  10  11  12  13  14  15
1988  16  17  18  19  20  21  22  23  24  25  26    
> ts(1:26,frequency = 1,start = c(1986,10)) frequency = 1表示按年份增加
Time Series:
Start = 1995 
End = 2020 
Frequency = 1 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26

ts函数
data　　一个向量或者矩阵
start　　第一个观测值的时间，为一个数字或者是一个由两个整数构成的向量
end　　最后一个观测值的时间，指定方法和start相同
frequency　　单位时间内观测值的频数（频率）
deltat　　两个观测值间的时间间隔。frequency和deltat必须并且只能给定其中一个
ts.eps　　序列之间的误差限，如果序列之间的频率差异小于ts.eps，则认为这些序列的频率相等
class　　对象的类型。一元序列的缺省值是“ts”，多元序列的缺省值是c（“mts”,“ts”）
names　　一个字符型向量，给出多元序列中每个一元序列的名称，缺省data中每列数据的名称或者Series 1，Series 2

分别表示年 季度 月份 生成的数据格式
 sales
 [1] 54 52 68 74 61 88 88 77 81 78 89 55 64 79 70 64 62 87 82 53 50 63 88 87 76 87 77 90 95
[30] 81 63 88 98 87 74 61 90 70 96 82 74 53 79 91 53 64 59 79
> ts(sales,start = c(2010,5),end = c(2014,4),frequency = 1)
Time Series:
Start = 2014 
End = 2017 
Frequency = 1 
[1] 54 52 68 74
> ts(sales,start = c(2010,5),end = c(2014,4),frequency = 4)
     Qtr1 Qtr2 Qtr3 Qtr4
2011   54   52   68   74
2012   61   88   88   77
2013   81   78   89   55
2014   64   79   70   64
> ts(sales,start = c(2010,5),end = c(2014,4),frequency = 12)
     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
2010                  54  52  68  74  61  88  88  77
2011  81  78  89  55  64  79  70  64  62  87  82  53
2012  50  63  88  87  76  87  77  90  95  81  63  88
2013  98  87  74  61  90  70  96  82  74  53  79  91
2014  53  64  59  79


> y <- c(1:20,seq(1,12,3))  1:20是一组数字，seq(1,12,3)是接着的一组数字
> y
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  1  4  7 10
x <- matrix(c(1:12,seq(1,12,3)),4,4)
> x
     [,1] [,2] [,3] [,4]
[1,]    1    5    9    1
[2,]    2    6   10    4
[3,]    3    7   11    7
[4,]    4    8   12   10


